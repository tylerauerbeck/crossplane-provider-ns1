// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecondariesInitParameters struct {

	// IPv4 address of the secondary server.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Whether we send NOTIFY messages to the secondary host
	// when the zone changes. Default false.
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`

	// Port of the the secondary server. Default 53.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type SecondariesObservation struct {

	// IPv4 address of the secondary server.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// List of network IDs for which the zone is
	// available. If no network is provided, the zone will be created in network 0,
	// the primary NS1 Global Network.
	// +listType=set
	Networks []*float64 `json:"networks,omitempty" tf:"networks,omitempty"`

	// Whether we send NOTIFY messages to the secondary host
	// when the zone changes. Default false.
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`

	// Port of the the secondary server. Default 53.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type SecondariesParameters struct {

	// IPv4 address of the secondary server.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Whether we send NOTIFY messages to the secondary host
	// when the zone changes. Default false.
	// +kubebuilder:validation:Optional
	Notify *bool `json:"notify,omitempty" tf:"notify,omitempty"`

	// Port of the the secondary server. Default 53.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type ZoneInitParameters struct {
	AdditionalPorts []*float64 `json:"additionalPorts,omitempty" tf:"additional_ports,omitempty"`

	// List of additional IPv4 addresses for the primary
	// zone. Conflicts with secondaries.
	AdditionalPrimaries []*string `json:"additionalPrimaries,omitempty" tf:"additional_primaries,omitempty"`

	// . If set to false, clears
	// the autogenerated NS record on zone creation. See
	// above for an example. Note that this option only has an effect when a zone is
	// being created.
	AutogenerateNsRecord *bool `json:"autogenerateNsRecord,omitempty" tf:"autogenerate_ns_record,omitempty"`

	// Whether or not DNSSEC is enabled for the zone.
	// Note that DNSSEC must be enabled on the account by support for this to be set
	// to true.
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// The SOA Expiry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// (Computed) The SOA Hostmaster.
	Hostmaster *string `json:"hostmaster,omitempty" tf:"hostmaster,omitempty"`

	// The target zone(domain name) to link to.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// List of network IDs for which the zone is
	// available. If no network is provided, the zone will be created in network 0,
	// the primary NS1 Global Network.
	// +listType=set
	Networks []*float64 `json:"networks,omitempty" tf:"networks,omitempty"`

	// The SOA NX TTL. Conflicts with primary and
	// additional_primaries (default must be accepted).
	NxTTL *float64 `json:"nxTtl,omitempty" tf:"nx_ttl,omitempty"`

	// The primary zones' IPv4 address. This makes the zone a
	// secondary. Conflicts with secondaries.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`

	// Port of the the secondary server. Default 53.
	PrimaryPort *float64 `json:"primaryPort,omitempty" tf:"primary_port,omitempty"`

	// The SOA Refresh. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Refresh *float64 `json:"refresh,omitempty" tf:"refresh,omitempty"`

	// The SOA Retry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Retry *float64 `json:"retry,omitempty" tf:"retry,omitempty"`

	// List of secondary servers. This makes the zone a
	// primary. Conflicts with primary and additional_primaries.
	// Secondaries is documented below.
	Secondaries []SecondariesInitParameters `json:"secondaries,omitempty" tf:"secondaries,omitempty"`

	// The SOA TTL.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// map of tags in the form of "key" = "value" where both key and value are strings
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// TSIG is documented below
	// +mapType=granular
	Tsig map[string]*string `json:"tsig,omitempty" tf:"tsig,omitempty"`

	// The domain name of the zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneObservation struct {
	AdditionalPorts []*float64 `json:"additionalPorts,omitempty" tf:"additional_ports,omitempty"`

	// List of additional IPv4 addresses for the primary
	// zone. Conflicts with secondaries.
	AdditionalPrimaries []*string `json:"additionalPrimaries,omitempty" tf:"additional_primaries,omitempty"`

	// . If set to false, clears
	// the autogenerated NS record on zone creation. See
	// above for an example. Note that this option only has an effect when a zone is
	// being created.
	AutogenerateNsRecord *bool `json:"autogenerateNsRecord,omitempty" tf:"autogenerate_ns_record,omitempty"`

	// Whether or not DNSSEC is enabled for the zone.
	// Note that DNSSEC must be enabled on the account by support for this to be set
	// to true.
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// (Computed) Authoritative Name Servers.
	DNSServers *string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// The SOA Expiry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// (Computed) The SOA Hostmaster.
	Hostmaster *string `json:"hostmaster,omitempty" tf:"hostmaster,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The target zone(domain name) to link to.
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// List of network IDs for which the zone is
	// available. If no network is provided, the zone will be created in network 0,
	// the primary NS1 Global Network.
	// +listType=set
	Networks []*float64 `json:"networks,omitempty" tf:"networks,omitempty"`

	// The SOA NX TTL. Conflicts with primary and
	// additional_primaries (default must be accepted).
	NxTTL *float64 `json:"nxTtl,omitempty" tf:"nx_ttl,omitempty"`

	// The primary zones' IPv4 address. This makes the zone a
	// secondary. Conflicts with secondaries.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`

	// Port of the the secondary server. Default 53.
	PrimaryPort *float64 `json:"primaryPort,omitempty" tf:"primary_port,omitempty"`

	// The SOA Refresh. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Refresh *float64 `json:"refresh,omitempty" tf:"refresh,omitempty"`

	// The SOA Retry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	Retry *float64 `json:"retry,omitempty" tf:"retry,omitempty"`

	// List of secondary servers. This makes the zone a
	// primary. Conflicts with primary and additional_primaries.
	// Secondaries is documented below.
	Secondaries []SecondariesObservation `json:"secondaries,omitempty" tf:"secondaries,omitempty"`

	// The SOA TTL.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// map of tags in the form of "key" = "value" where both key and value are strings
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// TSIG is documented below
	// +mapType=granular
	Tsig map[string]*string `json:"tsig,omitempty" tf:"tsig,omitempty"`

	// The domain name of the zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalPorts []*float64 `json:"additionalPorts,omitempty" tf:"additional_ports,omitempty"`

	// List of additional IPv4 addresses for the primary
	// zone. Conflicts with secondaries.
	// +kubebuilder:validation:Optional
	AdditionalPrimaries []*string `json:"additionalPrimaries,omitempty" tf:"additional_primaries,omitempty"`

	// . If set to false, clears
	// the autogenerated NS record on zone creation. See
	// above for an example. Note that this option only has an effect when a zone is
	// being created.
	// +kubebuilder:validation:Optional
	AutogenerateNsRecord *bool `json:"autogenerateNsRecord,omitempty" tf:"autogenerate_ns_record,omitempty"`

	// Whether or not DNSSEC is enabled for the zone.
	// Note that DNSSEC must be enabled on the account by support for this to be set
	// to true.
	// +kubebuilder:validation:Optional
	DNSSEC *bool `json:"dnssec,omitempty" tf:"dnssec,omitempty"`

	// The SOA Expiry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	// +kubebuilder:validation:Optional
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// (Computed) The SOA Hostmaster.
	// +kubebuilder:validation:Optional
	Hostmaster *string `json:"hostmaster,omitempty" tf:"hostmaster,omitempty"`

	// The target zone(domain name) to link to.
	// +kubebuilder:validation:Optional
	Link *string `json:"link,omitempty" tf:"link,omitempty"`

	// List of network IDs for which the zone is
	// available. If no network is provided, the zone will be created in network 0,
	// the primary NS1 Global Network.
	// +kubebuilder:validation:Optional
	// +listType=set
	Networks []*float64 `json:"networks,omitempty" tf:"networks,omitempty"`

	// The SOA NX TTL. Conflicts with primary and
	// additional_primaries (default must be accepted).
	// +kubebuilder:validation:Optional
	NxTTL *float64 `json:"nxTtl,omitempty" tf:"nx_ttl,omitempty"`

	// The primary zones' IPv4 address. This makes the zone a
	// secondary. Conflicts with secondaries.
	// +kubebuilder:validation:Optional
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`

	// Port of the the secondary server. Default 53.
	// +kubebuilder:validation:Optional
	PrimaryPort *float64 `json:"primaryPort,omitempty" tf:"primary_port,omitempty"`

	// The SOA Refresh. Conflicts with primary and
	// additional_primaries (default must be accepted).
	// +kubebuilder:validation:Optional
	Refresh *float64 `json:"refresh,omitempty" tf:"refresh,omitempty"`

	// The SOA Retry. Conflicts with primary and
	// additional_primaries (default must be accepted).
	// +kubebuilder:validation:Optional
	Retry *float64 `json:"retry,omitempty" tf:"retry,omitempty"`

	// List of secondary servers. This makes the zone a
	// primary. Conflicts with primary and additional_primaries.
	// Secondaries is documented below.
	// +kubebuilder:validation:Optional
	Secondaries []SecondariesParameters `json:"secondaries,omitempty" tf:"secondaries,omitempty"`

	// The SOA TTL.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// map of tags in the form of "key" = "value" where both key and value are strings
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// TSIG is documented below
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tsig map[string]*string `json:"tsig,omitempty" tf:"tsig,omitempty"`

	// The domain name of the zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneInitParameters `json:"initProvider,omitempty"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Zone is the Schema for the Zones API. Provides a NS1 Zone resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ns1}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ZoneSpec   `json:"spec"`
	Status ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
